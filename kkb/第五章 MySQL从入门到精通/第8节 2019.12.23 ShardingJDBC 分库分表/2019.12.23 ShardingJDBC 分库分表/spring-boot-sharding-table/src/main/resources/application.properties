# 数据源 ds0,ds1,ds0-slave    ds0,ds1做分库分表   ds0,ds0-slave 做主从读写分离 
sharding.jdbc.datasource.names=ds0,ds1,ds0-slave
# 第一个数据库
sharding.jdbc.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds0.jdbc-url=jdbc:mysql://192.168.56.101:3306/ds0?characterEncoding=utf-8
sharding.jdbc.datasource.ds0.username=root
sharding.jdbc.datasource.ds0.password=root

# 第二个数据库
sharding.jdbc.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds1.jdbc-url=jdbc:mysql://192.168.56.102:3306/ds1?characterEncoding=utf-8
sharding.jdbc.datasource.ds1.username=root
sharding.jdbc.datasource.ds1.password=root

# 第一个数据库的从库
sharding.jdbc.datasource.ds0-slave.type=com.zaxxer.hikari.HikariDataSource
sharding.jdbc.datasource.ds0-slave.driver-class-name=com.mysql.jdbc.Driver
sharding.jdbc.datasource.ds0-slave.jdbc-url=jdbc:mysql://192.168.56.103:3306/ds0?characterEncoding=utf-8
sharding.jdbc.datasource.ds0-slave.username=root
sharding.jdbc.datasource.ds0-slave.password=root


# 水平拆分的数据库（表） 配置分库 + 分表策略 行表达式分片策略
# 分库策略    user表和address表都用uid作为分库键
sharding.jdbc.config.sharding.default-database-strategy.inline.sharding-column=uid
sharding.jdbc.config.sharding.default-database-strategy.inline.algorithm-expression=ds$->{uid % 2}

# 分表策略 其中user为逻辑表 分表主要取决于age行
sharding.jdbc.config.sharding.tables.user.actual-data-nodes=ds$->{0..1}.user_$->{0..1}
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.sharding-column=age

#分表策略
sharding.jdbc.config.sharding.tables.address.actual-data-nodes=ds$->{0..1}.address_$->{0..1}
sharding.jdbc.config.sharding.tables.address.table-strategy.inline.sharding-column=aid


# 分片算法表达式
sharding.jdbc.config.sharding.tables.user.table-strategy.inline.algorithm-expression=user_$->{age % 2}

sharding.jdbc.config.sharding.tables.address.table-strategy.inline.algorithm-expression=address_$->{aid % 2}

#广播表配置
sharding.jdbc.config.sharding.broadcast-tables=code
# 主键 SNOWFLAKE 18位数 如果是分布式还要进行一个设置 防止主键重复
sharding.jdbc.config.sharding.tables.code.key-generator-column-name=id

#绑定表
sharding.jdbc.config.sharding.binding-tables=user,address

#主库
sharding.jdbc.config.sharding.master-slave-rules.ds0.master-data-source-name=ds0
#从库
sharding.jdbc.config.sharding.master-slave-rules.ds0.slave-data-source-names=ds0-slave


# 打印执行的数据库以及语句
sharding.jdbc.config.sharding.props.sql.show=true
spring.main.allow-bean-definition-overriding=true